import logging

from aiogram import Router, types
from aiogram.filters import Command
from bot.models import PurchasedDomain
from django.utils import timezone

router = Router()


@router.message(Command("domains"))
async def handle_domains_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        domains = PurchasedDomain.objects.order_by('-purchased_at')

        if not await domains.aexists():
            await message.answer("üõë –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–º–µ–Ω–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏
        response = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤:\n\n"
        async for domain in domains.aiterator():
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            purchased_date = timezone.localtime(domain.purchased_at).strftime("%d.%m.%Y")
            response += f"‚Ä¢ {domain.domain} (–∫—É–ø–ª–µ–Ω: {purchased_date})\n"

        await message.answer(response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /domains: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤.")
