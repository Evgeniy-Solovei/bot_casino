import ssl
import aiohttp
import os
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv("API_KEY")

router = Router()

API_URL = "https://api.dynadot.com/api3.json"
INPUT_FILE = "../file_parser/urls_to_check.txt"  # –ú–æ–π —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏
OUTPUT_FILE = "../file_parser/available_domains.txt"  # –°—é–¥–∞ –∑–∞–ø–∏—à–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã
UPLOAD_DIR = "../file_parser/uploads"  # –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs(UPLOAD_DIR, exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç


class DomainStates(StatesGroup):
    WaitingForConfirmation = State()
    WaitingForFile = State()
    Processing = State()


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
async def check_domain_availability(domain, session):
    params = {"key": API_KEY, "command": "search", "domain0": domain, "show_price": "1"}

    try:
        async with session.get(API_URL, params=params) as response:
            text = await response.text()
            print(f"–û—Ç–≤–µ—Ç –¥–ª—è {domain}: {text}")

            if '"Available":"yes"' in text:
                price_str = text.split("Registration Price:")[1].split("in USD")[0].strip()
                price = float(price_str)
                if price <= 4:
                    print(f"‚úÖ –î–æ–º–µ–Ω {domain} –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ {price} USD")
                    return f"{domain} {price}\n"
            elif '"Available":"no"' in text:
                print(f"‚ùå –î–æ–º–µ–Ω {domain} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {domain}. –û—Ç–≤–µ—Ç: {text}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è {domain}: {e}")

    return None


# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
async def process_domains(file_path):
    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    available_domains = []

    try:
        # –°–æ–∑–¥–∞—ë–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl_context=ssl_context)) as session:
            with open(file_path, "r") as file:
                for domain in file:
                    domain = domain.strip()
                    if domain:
                        result = await check_domain_availability(domain, session)
                        if result:
                            available_domains.append(result)

        if available_domains:
            with open(OUTPUT_FILE, "w") as file:
                file.writelines(available_domains)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
            return OUTPUT_FILE

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–º–µ–Ω–æ–≤: {e}")

    return None


# üïπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞"
@router.callback_query(F.data == "yes_dynadot")
async def handle_yes_dynadot(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    file_path = await process_domains(INPUT_FILE)

    if file_path:
        buttons = [
            [InlineKeyboardButton(text="–î–∞", callback_data="yes_dynadot_pay")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_dynadot_pay")],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        file = FSInputFile(file_path)
        await callback_query.message.answer_document(
            file, caption="‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n- –•–æ—á–µ—à—å –∏—Ö –≤—ã–∫—É–ø–∏—Ç—å? –ñ–º–∏ <b>[–î–∞]</b>\n"
                          "- –•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª? –ñ–º–∏ <b>[–ù–µ—Ç]</b> –∏ –∫–∏–¥–∞–π —Ñ–∞–π–ª.",
            reply_markup=keyboard, parse_mode="HTML"
        )
        await state.set_state(DomainStates.WaitingForConfirmation)
    else:
        await callback_query.message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()


# üïπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" ‚Üí –∂–¥–µ–º —Ñ–∞–π–ª
@router.callback_query(F.data == "no_dynadot")
async def handle_no_dynadot(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("üìÇ –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏ (.txt)")
    await state.set_state(DomainStates.WaitingForFile)


# üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@router.message(DomainStates.WaitingForFile, F.document)
async def handle_file_upload(message: Message, state: FSMContext):
    file_name = message.document.file_name

    if not file_name.endswith(".txt"):
        await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)")
        return

    file_path = os.path.join(UPLOAD_DIR, file_name)
    try:
        await message.bot.download(message.document.file_id, file_path)
        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

    processed_file = await process_domains(file_path)

    if processed_file:
        buttons = [
            [InlineKeyboardButton(text="–î–∞", callback_data="yes_dynadot_pay")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_dynadot_pay")],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        file = FSInputFile(processed_file)
        await message.answer_document(
            file, caption="‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n- –•–æ—á–µ—à—å –∏—Ö –≤—ã–∫—É–ø–∏—Ç—å? –ñ–º–∏ <b>[–î–∞]</b>\n"
                          "- –•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª? –ñ–º–∏ <b>[–ù–µ—Ç]</b> –∏ –∫–∏–¥–∞–π —Ñ–∞–π–ª.",
            reply_markup=keyboard, parse_mode="HTML"
        )
        await state.set_state(DomainStates.WaitingForConfirmation)
    else:
        await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤.")
        await state.clear()
