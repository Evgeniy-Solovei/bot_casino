import asyncio
import os
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram_bot.parser.parser_rkn import search_site, OUTPUT_FILE

router = Router()


class SearchState(StatesGroup):
    waiting_for_query = State()


@router.message(Command("search"))
async def process_search(message: types.Message, state: FSMContext):
    await message.reply("üîç –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ URL –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchState.waiting_for_query)


@router.message(SearchState.waiting_for_query)
async def handle_user_query(message: types.Message, state: FSMContext):
    try:
        user_query = message.text.strip()
        if not user_query:
            await message.reply("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        await message.reply(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –¥–ª—è: {user_query}...")

        # –ó–∞–ø—É—Å–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 –º–∏–Ω—É—Ç
        await asyncio.wait_for(
            asyncio.to_thread(search_site, user_query, max_pages=5),
            timeout=300
        )

        if not os.path.exists(OUTPUT_FILE):
            await message.reply("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        file_size = os.path.getsize(OUTPUT_FILE)
        if file_size == 0:
            await message.reply("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="yes_dynadot")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_dynadot")]
        ])

        await message.answer_document(
            FSInputFile(OUTPUT_FILE),
            caption="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤?",
            reply_markup=keyboard
        )

    except asyncio.TimeoutError:
        await message.reply("üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()