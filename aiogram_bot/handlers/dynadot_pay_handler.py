import os
import ssl
import aiohttp
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from bot.models import PurchasedDomain

load_dotenv()
API_KEY = os.getenv("API_KEY")

API_URL = "https://api.dynadot.com/api3.json"
UPLOAD_DIR = "../file_parser/"
OUTPUT_FILE = "../file_parser/purchased_domains.txt"

router = Router()


class DomainPayStates(StatesGroup):
    WaitingForConfirmation = State()
    WaitingForFile = State()
    ProcessingPurchase = State()

async def send_domain_status_to_api(domain_name, status="–ù–µ –ê–∫—Ç–∏–≤–µ–Ω"):
    url = "https://api.gang-soft.com/api/take_bot_data/"
    payload = {
        'current_domain': domain_name,
        'domain_mask': '',
        'status': status
    }
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, data=payload) as response:
                if response.status == 200:
                    print(f"‚úîÔ∏è –î–æ–º–µ–Ω {domain_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–µ–Ω–∞ {domain_name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {response.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–∞ {domain_name}: {e}")


# ‚úÖ –ü–æ–∫—É–ø–∫–∞ –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
async def purchase_domains(domains, session):
    purchased = []
    for i in range(0, len(domains), 99):
        chunk = domains[i:i + 99]
        params = {"key": API_KEY, "command": "bulk_register"}
        params.update({f"domain{idx}": domain for idx, domain in enumerate(chunk)})
        try:
            # –°–æ–∑–¥–∞—ë–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as temp_session:
                async with temp_session.get(API_URL, params=params) as response:
                    data = await response.json(content_type=None)
                    bulk_response = data.get("BulkRegisterResponse", {})
                    if bulk_response.get("ResponseCode") == 0 and bulk_response.get("Status") == "success":
                        bulk_register = bulk_response.get("BulkRegister", [])
                        for result in bulk_register:
                            domain_name = result.get("DomainName")
                            registration_result = result.get("Result")
                            message = result.get("Message")

                            if registration_result == "success":
                                purchased.append(domain_name)
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ API –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                                await send_domain_status_to_api(domain_name)
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {domain_name}: {message}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {bulk_response}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–æ–º–µ–Ω–æ–≤: {e}")
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    if purchased:
        purchased_domains = [PurchasedDomain(domain=domain) for domain in purchased]
        await PurchasedDomain.objects.abulk_create(purchased_domains)
    return purchased

# üïπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞" ‚Üí –ü–æ–∫—É–ø–∫–∞ –¥–æ–º–µ–Ω–æ–≤
@router.callback_query(F.data == "yes_dynadot_pay")
async def handle_yes_dynadot_pay(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("üí≥ –ü–æ–∫—É–ø–∞—é –¥–æ–º–µ–Ω—ã...")

    file_path = os.path.join(UPLOAD_DIR, "available_domains.txt")
    if not os.path.exists(file_path):
        await callback_query.message.answer("‚ùå –§–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(file_path, "r") as file:
            domains = [line.strip().split()[0] for line in file if line.strip()]
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

    if not domains:
        await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    async with aiohttp.ClientSession() as session:
        purchased = await purchase_domains(domains, session)

    if purchased:
        with open(OUTPUT_FILE, "w") as file:
            file.writelines(f"{domain}\n" for domain in purchased)
        file = FSInputFile(OUTPUT_FILE)
        await callback_query.message.answer_document(file, caption="‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –¥–æ–º–µ–Ω—ã.")

    await state.clear()


# üïπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" ‚Üí –ñ–¥–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
@router.callback_query(F.data == "no_dynadot_pay")
async def handle_no_dynadot_pay(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏.")
    await state.set_state(DomainPayStates.WaitingForFile)


# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
@router.message(DomainPayStates.WaitingForFile, F.document)
async def handle_file_upload(message: Message, state: FSMContext):
    file_name = message.document.file_name
    if not file_name.endswith(".txt"):
        await message.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å .txt —Ñ–∞–π–ª.")
        return

    file_path = os.path.join(UPLOAD_DIR, file_name)
    try:
        await message.bot.download(message.document.file_id, file_path)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

    try:
        with open(file_path, "r") as file:
            domains = [line.strip().split()[0] for line in file if line.strip()]
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return

    if domains:
        # –ü–æ–∫—É–ø–∫–∞ –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ API
        async with aiohttp.ClientSession() as session:
            purchased = await purchase_domains(domains, session)

        if purchased:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            purchased_domains = [PurchasedDomain(domain=domain) for domain in purchased]
            await PurchasedDomain.objects.abulk_create(purchased_domains)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª
            with open(OUTPUT_FILE, "w") as file:
                file.writelines(f"{domain}\n" for domain in purchased)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫—É–ø–ª–µ–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
            file = FSInputFile(OUTPUT_FILE)
            await message.answer_document(file, caption="‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –¥–æ–º–µ–Ω—ã.")
    else:
        await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    await state.clear()
